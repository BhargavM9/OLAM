---
- name: Audit mounts vs fstab and show df -Th
  hosts: all
  gather_facts: yes
  become: yes

  vars:
    ignore_fstypes:
      - tmpfs
      - devtmpfs
      - proc
      - sysfs
      - cgroup
      - cgroup2
      - overlay
      - debugfs
      - selinuxfs
      - autofs
      - fusectl
      - rpc_pipefs
      - mqueue
      - hugetlbfs
      - pstore
      - securityfs
      - binfmt_misc

  tasks:

    - name: Get UUID to device mapping
      command: lsblk -o NAME,UUID -nr
      register: blk_output
      changed_when: false

    - name: Build UUID -> /dev mapping
      set_fact:
        uuid_map: >-
          {{
            blk_output.stdout_lines
            | map('regex_search', '^(\\S+)\\s+(\\S+)?')
            | select()
            | map('list')
            | map('combine', [{'uuid': item[1], 'device': '/dev/' + item[0]}])
            | list
            | items2dict(key_name='uuid', value_name='device')
          }}

    - name: Parse expected mounts from /etc/fstab
      shell: |
        awk 'BEGIN{OFS="|"}
             /^[[:space:]]*#/ {next}
             NF < 4 {next}
             $3=="swap" {next}
             $4 ~ /noauto/ {next}
             $3 ~ /^(proc|sysfs|devpts|tmpfs|cgroup|cgroup2|overlay|autofs|mqueue|hugetlbfs|pstore|securityfs|debugfs|selinuxfs|rpc_pipefs|binfmt_misc)$/ {next}
             {print $1,$2,$3,$4}' /etc/fstab
      register: fstab_raw
      changed_when: false
      failed_when: false

    - name: Init fstab entries
      set_fact:
        fstab_entries: []
      when: fstab_raw.stdout != ""

    - name: Build structured fstab entries
      set_fact:
        fstab_entries: >-
          {{ fstab_entries + [ {'device': parts[0], 'mount': parts[1], 'fstype': parts[2], 'options': parts[3]} ] }}
      vars:
        parts: "{{ item.split('|') }}"
      loop: "{{ fstab_raw.stdout_lines | default([]) }}"
      when: fstab_raw.stdout != ""

    - name: Set live mounts from facts
      set_fact:
        live_mounts: "{{ (ansible_mounts | default([])) | rejectattr('fstype','in', ignore_fstypes) | list }}"

    - name: Build list of live mount points
      set_fact:
        live_mount_points: "{{ live_mounts | map(attribute='mount') | list }}"

    - name: Compute missing mounts (in fstab but not mounted)
      set_fact:
        missing_mounts: >-
          {{
            (fstab_entries | default([]) | map(attribute='mount') | list)
            | difference(live_mount_points | default([]))
          }}

    - name: Detect mismatches (ignoring UUID vs /dev/*)
      set_fact:
        mismatched_mounts: >-
          {% set out = [] %}
          {% for e in fstab_entries %}
            {% set live = (live_mounts | selectattr('mount','equalto', e.mount) | list) %}
            {% if live %}
              {% set live_dev = live[0].device | default('') %}
              {% set live_fstype = live[0].fstype | default('') %}
              {% set expected_dev = (e.device.startswith('UUID=') and uuid_map.get(e.device.split('=')[1])) or e.device %}
              {% if expected_dev and (live_dev != expected_dev or live_fstype != e.fstype) %}
                {% set _ = out.append({
                  'mount': e.mount,
                  'fstab_device': e.device,
                  'fstab_fstype': e.fstype,
                  'live_device': live_dev,
                  'live_fstype': live_fstype
                }) %}
              {% endif %}
            {% endif %}
          {% endfor %}
          {{ out }}

    - name: Show audit results
      debug:
        msg: |
          Host: {{ inventory_hostname }}
          Missing mounts: {{ missing_mounts | default([]) }}
          Mismatched mounts:
          {{ mismatched_mounts | default([]) | to_nice_yaml }}

    - name: Show df -Th like on server
      command: df -Th
      register: df_out
      changed_when: false

    - name: Print df -Th output
      debug:
        msg: "{{ df_out.stdout }}"
