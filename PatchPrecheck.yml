---
- name: Full Prepatch Validation for OLAM
  hosts: all
  become: true
  gather_facts: true

  vars:
    var_mount_point: "/var"

  tasks:

    - name: Check uptime
      command: uptime
      register: uptime_output
      changed_when: false
    - debug: msg="{{ uptime_output.stdout }}"

    - name: Last reboot time
      command: who -b
      register: last_reboot
      changed_when: false
    - debug: msg="{{ last_reboot.stdout }}"

    - name: Logged-in users
      command: who
      register: logged_users
      changed_when: false
    - debug: var=logged_users.stdout_lines

    - name: Check disk usage for root and boot
      command: df -Th {{ item }}
      loop:
        - /
        - /boot
      register: disk_usages
      changed_when: false
    - debug:
        msg: "{{ item.stdout_lines }}"
      loop: "{{ disk_usages.results }}"

    - name: Check memory usage
      command: free -h
      register: mem_usage
      changed_when: false
    - debug: var=mem_usage.stdout_lines

    - name: Load average
      command: cat /proc/loadavg
      register: load_avg
      changed_when: false
    - debug: msg="{{ load_avg.stdout }}"

    - name: Running services
      command: systemctl list-units --type=service --state=running
      register: running_services
      changed_when: false
    - debug: var=running_services.stdout_lines

    - name: Reboot required?
      stat:
        path: /var/run/reboot-required
      register: reboot_required

    - name: Notify if reboot is required
      when: reboot_required.stat.exists
      debug:
        msg: "⚠️ Reboot is required before patching!"

    - name: YUM/DNF lock check
      stat:
        path: /var/run/yum.pid
      register: yum_lock

    - name: Warn if YUM/DNF is running
      when: yum_lock.stat.exists
      debug:
        msg: "⚠️ YUM/DNF is currently running! Investigate before patching."

    # ==========================
    #  Patch Size Estimation
    # ==========================

    - name: Simulate dnf update
      command: dnf update --assumeno
      register: dnf_output
      changed_when: false
      failed_when: false

    - name: Parse dnf dry-run output
      set_fact:
        dnf_stdout_lines: "{{ dnf_output.stdout.split('\n') }}"
        dnf_patch_size_line: "{{ dnf_output.stdout | regex_search('Total download size:.*', multiline=True) | default('') }}"

    - name: Calculate patch size in MB
      set_fact:
        dnf_required_space_mb: >-
          {% set size = dnf_patch_size_line | regex_search('([0-9.]+)') | float %}
          {% set unit = dnf_patch_size_line | regex_search('[0-9.]+ ([A-Z])') %}
          {% if unit == 'G' %}
            {{ (size * 1024) | round }}
          {% elif unit == 'K' %}
            {{ (size / 1024) | round }}
          {% else %}
            {{ size | round }}
          {% endif %}
      when: dnf_patch_size_line != ''

    - name: Display patch size estimate
      debug:
        msg: >-
          {% if dnf_patch_size_line != '' %}
            🛠️ Patch size estimate: {{ dnf_required_space_mb }} MB
          {% else %}
            ✅ System is already up to date. No patching required.
          {% endif %}

    - name: Check available space in /var
      command: df -m {{ var_mount_point }}
      register: var_space
      changed_when: false

    - name: Get /var available space
      set_fact:
        var_available_space_mb: "{{ var_space.stdout_lines[1].split()[3] | int }}"

    - name: Show /var space
      debug:
        msg: "📦 Available space in /var: {{ var_available_space_mb }} MB"

    - name: Fail if /var space is insufficient for patch
      fail:
        msg: "❌ Not enough space in /var. Required: {{ dnf_required_space_mb }} MB, Available: {{ var_available_space_mb }} MB"
      when:
        - dnf_patch_size_line != ''
        - dnf_required_space_mb > var_available_space_mb

    - name: Final status
      debug:
        msg: "✅ Prepatch check passed. System is ready for patching."
      when:
        - dnf_patch_size_line == '' or dnf_required_space_mb <= var_available_space_mb
