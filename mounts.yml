---
- name: Disk Usage and Mount Verification Playbook
  hosts: all  # Adjust to your inventory group for all VMs
  become: yes  # Run with sudo privileges
  gather_facts: no  # No need for facts gathering

  tasks:
    - name: Get df -Th output
      command: df -Th
      register: df_output
      changed_when: false

    - name: Display df -Th output
      debug:
        msg: "{{ df_output.stdout_lines }}"

    - name: Verify mounts
      shell: |
        # Get fstab mount points, excluding comments and swap
        fstab_mounts=$(awk '!/^#/ && $3 != "swap" && NF >= 4 {print $2}' /etc/fstab | sort -u)
        # Get df mount points, excluding header
        df_mounts=$(df -Th | awk 'NR>1 {print $NF}' | sort -u)
        # Find missing mounts using comm
        missing=$(comm -23 <(echo "$fstab_mounts") <(echo "$df_mounts") | tr '\n' ',' | sed 's/,$//')
        # Get comma-separated fstab mount points for reporting
        fstab_mounts_list=$(echo "$fstab_mounts" | tr '\n' ',' | sed 's/,$//')
        if [ -z "$missing" ]; then
          echo "All mounts are good on {{ inventory_hostname }}: $fstab_mounts_list"
        else
          echo "Missing mounts on {{ inventory_hostname }}: $missing"
        fi
      register: mount_check
      changed_when: false

    - name: Report mount verification
      debug:
        msg: "{{ mount_check.stdout }}"

    - name: Collect exceeding filesystems
      shell: |
        df_lines=$(df -Th | tail -n +2)
        exceeding_count=0
        while read -r line; do
          fields=($line)
          if [ ${#fields[@]} -ge 7 ]; then
            usage="${fields[5]}"
            if [[ $usage =~ ^([0-9]+)%$ ]] && [ ${BASH_REMATCH[1]} -gt 45 ]; then
              exceeding_count=$((exceeding_count + 1))
            fi
          fi
        done <<< "$df_lines"
        if [ $exceeding_count -gt 0 ]; then
          echo "[$(for i in $(seq 1 $exceeding_count); do echo "{\"fs\":\"${fields[0]}\",\"mount\":\"${fields[6]}\",\"usage\":\"${fields[5]}\"}"; done | head -n $exceeding_count)]"
        else
          echo "[]"
        fi
      register: exceeding_raw
      changed_when: false

    - name: Parse exceeding filesystems
      set_fact:
        exceeding: "{{ exceeding_raw.stdout | from_json }}"

    - name: Report collecting done
      debug:
        msg: "collecting is done"
      run_once: true

    - name: Report exceeding disk usage
      debug:
        msg: "{% for e in exceeding %}Filesystem {{ e.fs }} or mount point {{ e.mount }} on this host exceeds 45% with {{ e.usage }}.\n{% endfor %}"
      when: exceeding | length > 0