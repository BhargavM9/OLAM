---
- name: Disk Usage and Mount Verification Playbook
  hosts: all
  become: yes
  gather_facts: no

  tasks:
    - name: Get df -Th output
      command: df -Th
      register: df_output
      changed_when: false

    - name: Display df -Th output
      debug:
        msg: "{{ df_output.stdout_lines }}"

    - name: Verify mounts
      shell: |
        fstab_mounts=$(awk '!/^#/ && $3 != "swap" && NF >= 4 {print $2}' /etc/fstab | sort -u)
        df_mounts=$(df -Th | awk 'NR>1 {print $NF}' | sort -u)
        missing=$(comm -23 <(echo "$fstab_mounts") <(echo "$df_mounts") | tr '\n' ',' | sed 's/,$//')
        fstab_mounts_list=$(echo "$fstab_mounts" | tr '\n' ',' | sed 's/,$//')
        if [ -z "$missing" ]; then
          echo "All mounts are good on {{ inventory_hostname }}: $fstab_mounts_list"
        else
          echo "Missing mounts on {{ inventory_hostname }}: $missing"
        fi
      register: mount_check
      changed_when: false

    - name: Report mount verification
      debug:
        msg: "{{ mount_check.stdout }}"

    - name: Initialize exceeding
      set_fact:
        exceeding: []
      no_log: true   # ðŸ”‡ hides "ok: [host]" spam

    - name: Collect exceeding filesystems
      set_fact:
        exceeding: "{{ exceeding + ( (item.split()[5] | default('0%') | regex_replace('%','') | int > 45) | ternary( [ {'fs': item.split()[0], 'mount': item.split()[6], 'usage': item.split()[5]} ] , [] ) ) }}"
      loop: "{{ df_output.stdout_lines[1:] }}"
      loop_control:
        label: ""
      no_log: true   # ðŸ”‡ hides "ok: [host]" spam

    - name: Report exceeding disk usage
      debug:
        msg: "{% for e in exceeding %}Filesystem {{ e.fs }} or mount point {{ e.mount }} on this host exceeds 45% with {{ e.usage }}.\n{% endfor %}"
      when: exceeding | length > 0
